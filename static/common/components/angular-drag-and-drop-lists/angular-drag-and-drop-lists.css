/***************************** Required styles *****************************/

/**
 * For the correct positioning of the placeholder element, the dnd-list and
 * it's children must have position: relative
 */
.advancedDemo ul[dnd-list],
.advancedDemo ul[dnd-list] > li {
	position: relative;
}

/***************************** Dropzone Styling *****************************/

/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop to it once it's empty
 */
.advancedDemo .dropzone ul[dnd-list] {
    min-height: 42px;
    margin: 0px;
    padding-left: 0px;
}

/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */
.advancedDemo .dropzone li {
    display: block;
}

/**
 * Reduce opacity of elements during the drag operation. This allows the user
 * to see where he is dropping his element, even if the element is huge. The
 * .dndDragging class is automatically set during the drag operation.
 */
.advancedDemo .dropzone .dndDragging {
    opacity: 0.7;
}

/**
 * The dndDraggingSource class will be applied to the source element of a drag
 * operation. It makes sense to hide it to give the user the feeling that he's
 * actually moving it. Note that the source element has also .dndDragging class.
 */
.advancedDemo .dropzone .dndDraggingSource {
    display: none;
}

/**
 * An element with .dndPlaceholder class will be added as child of the dnd-list
 * while the user is dragging over it.
 */
.advancedDemo .dropzone .dndPlaceholder {
    background-color: #ddd !important;
    min-height: 42px;
    display: block;
    position: relative;
}

/***************************** Element type specific styles *****************************/

.advancedDemo .dropzone .itemlist {
    min-height: 120px !important;
}

.advancedDemo .dropzone .itemlist > li {
    background-color: #337ab7;
    border: none;
    border-radius: .25em;
    color: #fff;
    float: left;
    font-weight: 700;
    height: 50px;
    margin: 5px;
    padding: 3px;
    text-align: center;
    width: 50px;
}

.advancedDemo .dropzone .container-element {
    margin: 10px;
}

.advancedDemo ul[dnd-list] li.selected {
    background-color: #dff0d8;
    outline-style: solid;
    outline-color: #00A193;
    border: 1px solid black;
    color: #3c763d;
}

.advancedDemo ul[dnd-list] div.selected {
    background-color: #dff0d8;
    outline-style: solid;
    outline-color: #00A193;
    border: 1px solid black;
    color: #3c763d;
}

.advancedDemo ul[dnd-list],
.advancedDemo ul[dnd-list] > li {
  position: relative;
}

/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop into it once it's empty
 */
.advancedDemo ul[dnd-list] {
    min-height: 42px;
    padding-left: 0px;
}

/**
 * An element with .dndPlaceholder class will be
 * added to the dnd-list while the user is dragging
 * over it.
 */
.advancedDemo ul[dnd-list] .dndPlaceholder {
    display: block;
    background-color: #ddd;
    min-height: 42px;
}

/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */
.advancedDemo ul[dnd-list] li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
    display: block;
    padding: 10px 15px;
    margin-bottom: -1px;
}

ul[dnd-list] img.selected{
    border:4px solid #00a1b5;
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
    /*margin:10px;*/

}
ul[dnd-list] .selected{
    /*border-top-right-radius: 4px;*/
    /*border-top-left-radius: 4px;*/
    /*display: block;*/

    /*border:4px solid #00a1b5;*/

      /*outline: 4px solid #00a1b5;*/
      /*outline-offset: -4px;*/
}

.check {
    margin: 0;
    position: absolute;
    color: white;
    top: 50%;
    left: 50%;
    margin-right: -50%;
    transform: translate(-50%, -50%)
}